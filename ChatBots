{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this Jupyter Notebook I created a chat bots. The data has three parts as follow:\n",
    "#1- The story,  for an example:  'Mary moved to the bathroom . Sandra journeyed to the bedroom .'\n",
    "#2- The question, for an example: 'Is Sandra in the hallway ?'\n",
    "#3- The answer (wich is yes or no),  for an example:  No\n",
    "# The objective is to create a model which can predict the answer based on the given story and question.\n",
    "#The model has been created based on the following paper\n",
    "# https://arxiv.org/pdf/1503.08895.pdf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import deque\n",
    "memory = deque(maxlen=2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"train_qa.txt\", \"rb\") as fp:   # Unpickling\n",
    "    train_data =  pickle.load(fp)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"test_qa.txt\", \"rb\") as fp:   # Unpickling\n",
    "    test_data =  pickle.load(fp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Type of train_data: <class 'list'> ,  Length of train_data: 10000)\n"
     ]
    }
   ],
   "source": [
    "print(f'(Type of train_data: {type(train_data)} ,  Length of train_data: {len(train_data)})')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Type of test_data: <class 'list'> ,  Length of test_data: 1000)\n"
     ]
    }
   ],
   "source": [
    "print(f'(Type of test_data: {type(test_data)} ,  Length of test_data: {len(test_data)})')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['Mary',\n",
       "  'moved',\n",
       "  'to',\n",
       "  'the',\n",
       "  'bathroom',\n",
       "  '.',\n",
       "  'Sandra',\n",
       "  'journeyed',\n",
       "  'to',\n",
       "  'the',\n",
       "  'bedroom',\n",
       "  '.'],\n",
       " ['Is', 'Sandra', 'in', 'the', 'hallway', '?'],\n",
       " 'no')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Mary moved to the bathroom . Sandra journeyed to the bedroom .'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Print the first text\n",
    "' '.join(train_data[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Is Sandra in the hallway ?'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print the first question\n",
    "' '.join(train_data[0][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'no'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print the first answer\n",
    "train_data[0][2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a set that holds the vocab words\n",
    "vocab = set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need all train and test data in our vocab\n",
    "all_data = test_data + train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "for story, question , answer in all_data:\n",
    "    vocab = vocab.union(set(story))\n",
    "    vocab = vocab.union(set(question))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "vocab.add('no')\n",
    "vocab.add('yes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'.',\n",
       " '?',\n",
       " 'Daniel',\n",
       " 'Is',\n",
       " 'John',\n",
       " 'Mary',\n",
       " 'Sandra',\n",
       " 'apple',\n",
       " 'back',\n",
       " 'bathroom',\n",
       " 'bedroom',\n",
       " 'discarded',\n",
       " 'down',\n",
       " 'dropped',\n",
       " 'football',\n",
       " 'garden',\n",
       " 'got',\n",
       " 'grabbed',\n",
       " 'hallway',\n",
       " 'in',\n",
       " 'journeyed',\n",
       " 'kitchen',\n",
       " 'left',\n",
       " 'milk',\n",
       " 'moved',\n",
       " 'no',\n",
       " 'office',\n",
       " 'picked',\n",
       " 'put',\n",
       " 'the',\n",
       " 'there',\n",
       " 'to',\n",
       " 'took',\n",
       " 'travelled',\n",
       " 'up',\n",
       " 'went',\n",
       " 'yes'}"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lets grap the largest text\n",
    "max_story_len = max([len(data[0]) for data in all_data]) #= 156"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_question_len = max([len(data[1]) for data in all_data]) #= 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reserve 0 for pad_sequences\n",
    "vocab_size = len(vocab) + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.preprocessing.text import Tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# integer encode sequences of words\n",
    "tokenizer = Tokenizer(filters=[])\n",
    "tokenizer.fit_on_texts(vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bathroom': 1,\n",
       " 'in': 2,\n",
       " 'is': 3,\n",
       " 'up': 4,\n",
       " 'apple': 5,\n",
       " 'put': 6,\n",
       " 'discarded': 7,\n",
       " 'journeyed': 8,\n",
       " 'mary': 9,\n",
       " 'hallway': 10,\n",
       " '.': 11,\n",
       " 'kitchen': 12,\n",
       " 'bedroom': 13,\n",
       " 'picked': 14,\n",
       " 'yes': 15,\n",
       " 'back': 16,\n",
       " 'moved': 17,\n",
       " 'travelled': 18,\n",
       " 'sandra': 19,\n",
       " 'down': 20,\n",
       " 'took': 21,\n",
       " 'went': 22,\n",
       " 'milk': 23,\n",
       " 'grabbed': 24,\n",
       " 'there': 25,\n",
       " 'left': 26,\n",
       " 'no': 27,\n",
       " 'john': 28,\n",
       " 'daniel': 29,\n",
       " 'to': 30,\n",
       " '?': 31,\n",
       " 'got': 32,\n",
       " 'the': 33,\n",
       " 'garden': 34,\n",
       " 'dropped': 35,\n",
       " 'office': 36,\n",
       " 'football': 37}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokenizer.word_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_story_text = []\n",
    "train_question_text = []\n",
    "train_answers = []\n",
    "\n",
    "for story,question,answer in train_data:\n",
    "    train_story_text.append(story)\n",
    "    train_question_text.append(question)\n",
    "    train_answers.append(answer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_story_seq = tokenizer.texts_to_sequences(train_story_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vectorize_stories(data, word_index=tokenizer.word_index, max_story_len=max_story_len,max_question_len=max_question_len):\n",
    "\n",
    "    # X = Text\n",
    "    X = []\n",
    "    # Xq =QUESTION\n",
    "    Xq = []\n",
    "    # Y = CORRECT ANSWER\n",
    "    Y = []\n",
    "    \n",
    "    \n",
    "    for story, query, answer in data:\n",
    "        \n",
    "        # In the dictionary tokenizer.word.index we grab the indecies of the words\n",
    "        x = [word_index[word.lower()] for word in story]\n",
    "        # Grab the word index for every word in query\n",
    "        xq = [word_index[word.lower()] for word in query]\n",
    "        \n",
    "        y = np.zeros(len(word_index) + 1)\n",
    "        y[word_index[answer]] = 1\n",
    "        \n",
    "        X.append(x)\n",
    "        Xq.append(xq)\n",
    "        Y.append(y)\n",
    "        \n",
    "\n",
    "    return (pad_sequences(X, maxlen=max_story_len),pad_sequences(Xq, maxlen=max_question_len), np.array(Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_train, queries_train, answers_train = vectorize_stories(train_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_test, queries_test, answers_test = vectorize_stories(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  0,  0, ..., 33, 13, 11],\n",
       "       [ 0,  0,  0, ..., 33, 34, 11],\n",
       "       [ 0,  0,  0, ..., 33, 34, 11],\n",
       "       ...,\n",
       "       [ 0,  0,  0, ..., 33,  5, 11],\n",
       "       [ 0,  0,  0, ..., 33, 34, 11],\n",
       "       [ 0,  0,  0, ...,  5, 25, 11]], dtype=int32)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Lets see how looks inputs_test \n",
    "inputs_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating the model\n",
    "from keras.models import Sequential, Model\n",
    "from keras.layers.embeddings import Embedding\n",
    "from keras.layers import Input, Activation, Dense, Permute, Dropout\n",
    "from keras.layers import add, dot, concatenate\n",
    "from keras.layers import LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Input() is used to instantiate a Keras tensor.\n",
    "input_sequence = Input((max_story_len,))\n",
    "question = Input((max_question_len,))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Input gets embedded to a sequence of vectors\n",
    "input_encoder_m = Sequential()\n",
    "input_encoder_m.add(Embedding(input_dim=vocab_size,output_dim=64))\n",
    "input_encoder_m.add(Dropout(0.3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# embed the input into a sequence of vectors of size query_maxlen\n",
    "input_encoder_c = Sequential()\n",
    "input_encoder_c.add(Embedding(input_dim=vocab_size,output_dim=max_question_len))\n",
    "input_encoder_c.add(Dropout(0.3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# embed the question into a sequence of vectors\n",
    "question_encoder = Sequential()\n",
    "question_encoder.add(Embedding(input_dim=vocab_size,\n",
    "                               output_dim=64,\n",
    "                               input_length=max_question_len))\n",
    "question_encoder.add(Dropout(0.3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# encode input sequence and questions (which are indices)\n",
    "# to sequences of dense vectors\n",
    "input_encoded_m = input_encoder_m(input_sequence)\n",
    "input_encoded_c = input_encoder_c(input_sequence)\n",
    "question_encoded = question_encoder(question)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Defined in this way match is a probability vector over the inputs\n",
    "match = dot([input_encoded_m, question_encoded], axes=(2, 2))\n",
    "match = Activation('softmax')(match)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add the match matrix with the second input vector sequence\n",
    "response = add([match, input_encoded_c])  # (samples, story_maxlen, query_maxlen)\n",
    "response = Permute((2, 1))(response)      # (samples, query_maxlen, story_maxlen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# concatenate the match matrix with the question vector sequence\n",
    "answer = concatenate([response, question_encoded])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reduce with RNN (LSTM)\n",
    "answer = LSTM(32)(answer)  # (samples, 32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Regularization with Dropout\n",
    "answer = Dropout(0.5)(answer)\n",
    "answer = Dense(vocab_size)(answer)  # (samples, vocab_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we output a probability distribution over the vocabulary\n",
    "answer = Activation('softmax')(answer)\n",
    "\n",
    "# build the final model\n",
    "model = Model([input_sequence, question], answer)\n",
    "model.compile(optimizer='rmsprop', loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_1 (InputLayer)            (None, 156)          0                                            \n",
      "__________________________________________________________________________________________________\n",
      "input_2 (InputLayer)            (None, 6)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "sequential_1 (Sequential)       multiple             2432        input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "sequential_3 (Sequential)       (None, 6, 64)        2432        input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dot_1 (Dot)                     (None, 156, 6)       0           sequential_1[1][0]               \n",
      "                                                                 sequential_3[1][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_1 (Activation)       (None, 156, 6)       0           dot_1[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "sequential_2 (Sequential)       multiple             228         input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "add_1 (Add)                     (None, 156, 6)       0           activation_1[0][0]               \n",
      "                                                                 sequential_2[1][0]               \n",
      "__________________________________________________________________________________________________\n",
      "permute_1 (Permute)             (None, 6, 156)       0           add_1[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_1 (Concatenate)     (None, 6, 220)       0           permute_1[0][0]                  \n",
      "                                                                 sequential_3[1][0]               \n",
      "__________________________________________________________________________________________________\n",
      "lstm_1 (LSTM)                   (None, 32)           32384       concatenate_1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "dropout_4 (Dropout)             (None, 32)           0           lstm_1[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "dense_1 (Dense)                 (None, 38)           1254        dropout_4[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_2 (Activation)       (None, 38)           0           dense_1[0][0]                    \n",
      "==================================================================================================\n",
      "Total params: 38,730\n",
      "Trainable params: 38,730\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /opt/anaconda3/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n",
      "\n",
      "Train on 10000 samples, validate on 1000 samples\n",
      "Epoch 1/120\n",
      "10000/10000 [==============================] - 2s 238us/step - loss: 0.9034 - accuracy: 0.5005 - val_loss: 0.6966 - val_accuracy: 0.5030\n",
      "Epoch 2/120\n",
      "10000/10000 [==============================] - 2s 164us/step - loss: 0.7042 - accuracy: 0.5027 - val_loss: 0.6937 - val_accuracy: 0.4970\n",
      "Epoch 3/120\n",
      "10000/10000 [==============================] - 2s 169us/step - loss: 0.6969 - accuracy: 0.5004 - val_loss: 0.6942 - val_accuracy: 0.4970\n",
      "Epoch 4/120\n",
      "10000/10000 [==============================] - 2s 168us/step - loss: 0.6948 - accuracy: 0.5077 - val_loss: 0.6948 - val_accuracy: 0.5030\n",
      "Epoch 5/120\n",
      "10000/10000 [==============================] - 2s 166us/step - loss: 0.6954 - accuracy: 0.4928 - val_loss: 0.6970 - val_accuracy: 0.4970\n",
      "Epoch 6/120\n",
      "10000/10000 [==============================] - 2s 176us/step - loss: 0.6943 - accuracy: 0.5055 - val_loss: 0.6932 - val_accuracy: 0.5030\n",
      "Epoch 7/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.6943 - accuracy: 0.5070 - val_loss: 0.6933 - val_accuracy: 0.4850\n",
      "Epoch 8/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.6948 - accuracy: 0.4947 - val_loss: 0.6945 - val_accuracy: 0.5030\n",
      "Epoch 9/120\n",
      "10000/10000 [==============================] - 2s 181us/step - loss: 0.6941 - accuracy: 0.4988 - val_loss: 0.6961 - val_accuracy: 0.4970\n",
      "Epoch 10/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.6935 - accuracy: 0.5002 - val_loss: 0.6939 - val_accuracy: 0.4660\n",
      "Epoch 11/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.6904 - accuracy: 0.5270 - val_loss: 0.6867 - val_accuracy: 0.5180\n",
      "Epoch 12/120\n",
      "10000/10000 [==============================] - 2s 175us/step - loss: 0.6483 - accuracy: 0.6215 - val_loss: 0.5809 - val_accuracy: 0.6970\n",
      "Epoch 13/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.5266 - accuracy: 0.7543 - val_loss: 0.4658 - val_accuracy: 0.8050\n",
      "Epoch 14/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.4604 - accuracy: 0.8009 - val_loss: 0.4225 - val_accuracy: 0.8360\n",
      "Epoch 15/120\n",
      "10000/10000 [==============================] - 2s 190us/step - loss: 0.4215 - accuracy: 0.8204 - val_loss: 0.3989 - val_accuracy: 0.8310\n",
      "Epoch 16/120\n",
      "10000/10000 [==============================] - 2s 190us/step - loss: 0.3968 - accuracy: 0.8364 - val_loss: 0.3861 - val_accuracy: 0.8290\n",
      "Epoch 17/120\n",
      "10000/10000 [==============================] - 2s 192us/step - loss: 0.3813 - accuracy: 0.8419 - val_loss: 0.3936 - val_accuracy: 0.8330\n",
      "Epoch 18/120\n",
      "10000/10000 [==============================] - 2s 181us/step - loss: 0.3620 - accuracy: 0.8481 - val_loss: 0.3779 - val_accuracy: 0.8330\n",
      "Epoch 19/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.3546 - accuracy: 0.8493 - val_loss: 0.3895 - val_accuracy: 0.8490\n",
      "Epoch 20/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.3473 - accuracy: 0.8514 - val_loss: 0.4167 - val_accuracy: 0.8370\n",
      "Epoch 21/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.3376 - accuracy: 0.8545 - val_loss: 0.3503 - val_accuracy: 0.8290\n",
      "Epoch 22/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.3328 - accuracy: 0.8548 - val_loss: 0.3907 - val_accuracy: 0.8190\n",
      "Epoch 23/120\n",
      "10000/10000 [==============================] - 2s 197us/step - loss: 0.3266 - accuracy: 0.8589 - val_loss: 0.3559 - val_accuracy: 0.8270\n",
      "Epoch 24/120\n",
      "10000/10000 [==============================] - 2s 203us/step - loss: 0.3214 - accuracy: 0.8630 - val_loss: 0.3897 - val_accuracy: 0.8310\n",
      "Epoch 25/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.3227 - accuracy: 0.8595 - val_loss: 0.3441 - val_accuracy: 0.8440\n",
      "Epoch 26/120\n",
      "10000/10000 [==============================] - 2s 187us/step - loss: 0.3181 - accuracy: 0.8626 - val_loss: 0.3399 - val_accuracy: 0.8450\n",
      "Epoch 27/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.3117 - accuracy: 0.8616 - val_loss: 0.3641 - val_accuracy: 0.8340\n",
      "Epoch 28/120\n",
      "10000/10000 [==============================] - 2s 181us/step - loss: 0.3107 - accuracy: 0.8653 - val_loss: 0.3409 - val_accuracy: 0.8390\n",
      "Epoch 29/120\n",
      "10000/10000 [==============================] - 2s 193us/step - loss: 0.3081 - accuracy: 0.8670 - val_loss: 0.3306 - val_accuracy: 0.8410\n",
      "Epoch 30/120\n",
      "10000/10000 [==============================] - 2s 194us/step - loss: 0.3076 - accuracy: 0.8638 - val_loss: 0.3484 - val_accuracy: 0.8350\n",
      "Epoch 31/120\n",
      "10000/10000 [==============================] - 2s 198us/step - loss: 0.3060 - accuracy: 0.8663 - val_loss: 0.3426 - val_accuracy: 0.8370\n",
      "Epoch 32/120\n",
      "10000/10000 [==============================] - 2s 195us/step - loss: 0.2994 - accuracy: 0.8697 - val_loss: 0.3379 - val_accuracy: 0.8500\n",
      "Epoch 33/120\n",
      "10000/10000 [==============================] - 2s 194us/step - loss: 0.3030 - accuracy: 0.8655 - val_loss: 0.3283 - val_accuracy: 0.8480\n",
      "Epoch 34/120\n",
      "10000/10000 [==============================] - 2s 189us/step - loss: 0.2997 - accuracy: 0.8675 - val_loss: 0.3391 - val_accuracy: 0.8360\n",
      "Epoch 35/120\n",
      "10000/10000 [==============================] - 2s 201us/step - loss: 0.2981 - accuracy: 0.8718 - val_loss: 0.3325 - val_accuracy: 0.8420\n",
      "Epoch 36/120\n",
      "10000/10000 [==============================] - 2s 189us/step - loss: 0.2960 - accuracy: 0.8701 - val_loss: 0.3424 - val_accuracy: 0.8430\n",
      "Epoch 37/120\n",
      "10000/10000 [==============================] - 2s 176us/step - loss: 0.2972 - accuracy: 0.8703 - val_loss: 0.3393 - val_accuracy: 0.8400\n",
      "Epoch 38/120\n",
      "10000/10000 [==============================] - 2s 173us/step - loss: 0.2961 - accuracy: 0.8690 - val_loss: 0.3338 - val_accuracy: 0.8420\n",
      "Epoch 39/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2917 - accuracy: 0.8720 - val_loss: 0.4491 - val_accuracy: 0.8160\n",
      "Epoch 40/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2947 - accuracy: 0.8695 - val_loss: 0.3515 - val_accuracy: 0.8380\n",
      "Epoch 41/120\n",
      "10000/10000 [==============================] - 2s 183us/step - loss: 0.2936 - accuracy: 0.8708 - val_loss: 0.3480 - val_accuracy: 0.8360\n",
      "Epoch 42/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2917 - accuracy: 0.8688 - val_loss: 0.3521 - val_accuracy: 0.8380\n",
      "Epoch 43/120\n",
      "10000/10000 [==============================] - 2s 175us/step - loss: 0.2909 - accuracy: 0.8699 - val_loss: 0.3495 - val_accuracy: 0.8340\n",
      "Epoch 44/120\n",
      "10000/10000 [==============================] - 2s 187us/step - loss: 0.2879 - accuracy: 0.8725 - val_loss: 0.3618 - val_accuracy: 0.8360\n",
      "Epoch 45/120\n",
      "10000/10000 [==============================] - 2s 194us/step - loss: 0.2913 - accuracy: 0.8712 - val_loss: 0.3400 - val_accuracy: 0.8420\n",
      "Epoch 46/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.2926 - accuracy: 0.8710 - val_loss: 0.3472 - val_accuracy: 0.8400\n",
      "Epoch 47/120\n",
      "10000/10000 [==============================] - 2s 186us/step - loss: 0.2892 - accuracy: 0.8720 - val_loss: 0.3538 - val_accuracy: 0.8400\n",
      "Epoch 48/120\n",
      "10000/10000 [==============================] - 2s 194us/step - loss: 0.2851 - accuracy: 0.8763 - val_loss: 0.3329 - val_accuracy: 0.8470\n",
      "Epoch 49/120\n",
      "10000/10000 [==============================] - 2s 183us/step - loss: 0.2876 - accuracy: 0.8719 - val_loss: 0.3296 - val_accuracy: 0.8430\n",
      "Epoch 50/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.2854 - accuracy: 0.8748 - val_loss: 0.3522 - val_accuracy: 0.8470\n",
      "Epoch 51/120\n",
      "10000/10000 [==============================] - 2s 185us/step - loss: 0.2866 - accuracy: 0.8751 - val_loss: 0.3677 - val_accuracy: 0.8400\n",
      "Epoch 52/120\n",
      "10000/10000 [==============================] - 2s 194us/step - loss: 0.2855 - accuracy: 0.8752 - val_loss: 0.3579 - val_accuracy: 0.8360\n",
      "Epoch 53/120\n",
      "10000/10000 [==============================] - 2s 199us/step - loss: 0.2823 - accuracy: 0.8753 - val_loss: 0.3530 - val_accuracy: 0.8380\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 54/120\n",
      "10000/10000 [==============================] - 2s 188us/step - loss: 0.2854 - accuracy: 0.8720 - val_loss: 0.3487 - val_accuracy: 0.8370\n",
      "Epoch 55/120\n",
      "10000/10000 [==============================] - 2s 187us/step - loss: 0.2816 - accuracy: 0.8759 - val_loss: 0.3471 - val_accuracy: 0.8430\n",
      "Epoch 56/120\n",
      "10000/10000 [==============================] - 2s 196us/step - loss: 0.2829 - accuracy: 0.8741 - val_loss: 0.3518 - val_accuracy: 0.8410\n",
      "Epoch 57/120\n",
      "10000/10000 [==============================] - 2s 199us/step - loss: 0.2798 - accuracy: 0.8749 - val_loss: 0.3563 - val_accuracy: 0.8360\n",
      "Epoch 58/120\n",
      "10000/10000 [==============================] - 2s 188us/step - loss: 0.2777 - accuracy: 0.8749 - val_loss: 0.3620 - val_accuracy: 0.8380\n",
      "Epoch 59/120\n",
      "10000/10000 [==============================] - 2s 183us/step - loss: 0.2784 - accuracy: 0.8768 - val_loss: 0.3461 - val_accuracy: 0.8360\n",
      "Epoch 60/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2789 - accuracy: 0.8794 - val_loss: 0.3515 - val_accuracy: 0.8370\n",
      "Epoch 61/120\n",
      "10000/10000 [==============================] - 2s 191us/step - loss: 0.2740 - accuracy: 0.8803 - val_loss: 0.3531 - val_accuracy: 0.8400\n",
      "Epoch 62/120\n",
      "10000/10000 [==============================] - 2s 198us/step - loss: 0.2744 - accuracy: 0.8784 - val_loss: 0.3825 - val_accuracy: 0.8330\n",
      "Epoch 63/120\n",
      "10000/10000 [==============================] - 2s 193us/step - loss: 0.2745 - accuracy: 0.8815 - val_loss: 0.3719 - val_accuracy: 0.8400\n",
      "Epoch 64/120\n",
      "10000/10000 [==============================] - 2s 185us/step - loss: 0.2744 - accuracy: 0.8783 - val_loss: 0.4000 - val_accuracy: 0.8310\n",
      "Epoch 65/120\n",
      "10000/10000 [==============================] - 2s 181us/step - loss: 0.2725 - accuracy: 0.8787 - val_loss: 0.3890 - val_accuracy: 0.8360\n",
      "Epoch 66/120\n",
      "10000/10000 [==============================] - 2s 191us/step - loss: 0.2713 - accuracy: 0.8809 - val_loss: 0.3813 - val_accuracy: 0.8330\n",
      "Epoch 67/120\n",
      "10000/10000 [==============================] - 2s 185us/step - loss: 0.2689 - accuracy: 0.8860 - val_loss: 0.3938 - val_accuracy: 0.8350\n",
      "Epoch 68/120\n",
      "10000/10000 [==============================] - 2s 188us/step - loss: 0.2680 - accuracy: 0.8807 - val_loss: 0.4251 - val_accuracy: 0.8280\n",
      "Epoch 69/120\n",
      "10000/10000 [==============================] - 2s 192us/step - loss: 0.2678 - accuracy: 0.8826 - val_loss: 0.3686 - val_accuracy: 0.8380\n",
      "Epoch 70/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2668 - accuracy: 0.8807 - val_loss: 0.3873 - val_accuracy: 0.8420\n",
      "Epoch 71/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2628 - accuracy: 0.8849 - val_loss: 0.4051 - val_accuracy: 0.8300\n",
      "Epoch 72/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.2690 - accuracy: 0.8874 - val_loss: 0.3748 - val_accuracy: 0.8360\n",
      "Epoch 73/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.2681 - accuracy: 0.8833 - val_loss: 0.3808 - val_accuracy: 0.8300\n",
      "Epoch 74/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2685 - accuracy: 0.8841 - val_loss: 0.3877 - val_accuracy: 0.8380\n",
      "Epoch 75/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2610 - accuracy: 0.8867 - val_loss: 0.3930 - val_accuracy: 0.8280\n",
      "Epoch 76/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2603 - accuracy: 0.8869 - val_loss: 0.3902 - val_accuracy: 0.8270\n",
      "Epoch 77/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2612 - accuracy: 0.8891 - val_loss: 0.3999 - val_accuracy: 0.8410\n",
      "Epoch 78/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.2601 - accuracy: 0.8899 - val_loss: 0.3760 - val_accuracy: 0.8350\n",
      "Epoch 79/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2650 - accuracy: 0.8872 - val_loss: 0.4040 - val_accuracy: 0.8280\n",
      "Epoch 80/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2581 - accuracy: 0.8879 - val_loss: 0.3872 - val_accuracy: 0.8400\n",
      "Epoch 81/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2583 - accuracy: 0.8896 - val_loss: 0.4100 - val_accuracy: 0.8310\n",
      "Epoch 82/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2548 - accuracy: 0.8893 - val_loss: 0.4048 - val_accuracy: 0.8310\n",
      "Epoch 83/120\n",
      "10000/10000 [==============================] - 2s 185us/step - loss: 0.2500 - accuracy: 0.8946 - val_loss: 0.4059 - val_accuracy: 0.8390\n",
      "Epoch 84/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.2528 - accuracy: 0.8932 - val_loss: 0.4054 - val_accuracy: 0.8350\n",
      "Epoch 85/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2537 - accuracy: 0.8894 - val_loss: 0.3980 - val_accuracy: 0.8280\n",
      "Epoch 86/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2574 - accuracy: 0.8915 - val_loss: 0.4268 - val_accuracy: 0.8370\n",
      "Epoch 87/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2539 - accuracy: 0.8927 - val_loss: 0.4332 - val_accuracy: 0.8320\n",
      "Epoch 88/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2473 - accuracy: 0.8932 - val_loss: 0.4392 - val_accuracy: 0.8290\n",
      "Epoch 89/120\n",
      "10000/10000 [==============================] - 2s 183us/step - loss: 0.2495 - accuracy: 0.8940 - val_loss: 0.4020 - val_accuracy: 0.8350\n",
      "Epoch 90/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2463 - accuracy: 0.8963 - val_loss: 0.3998 - val_accuracy: 0.8280\n",
      "Epoch 91/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2450 - accuracy: 0.8963 - val_loss: 0.4300 - val_accuracy: 0.8350\n",
      "Epoch 92/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2408 - accuracy: 0.8993 - val_loss: 0.4234 - val_accuracy: 0.8250\n",
      "Epoch 93/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2442 - accuracy: 0.8960 - val_loss: 0.4015 - val_accuracy: 0.8320\n",
      "Epoch 94/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2394 - accuracy: 0.8972 - val_loss: 0.4113 - val_accuracy: 0.8330\n",
      "Epoch 95/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.2398 - accuracy: 0.8989 - val_loss: 0.4290 - val_accuracy: 0.8340\n",
      "Epoch 96/120\n",
      "10000/10000 [==============================] - 2s 185us/step - loss: 0.2451 - accuracy: 0.8985 - val_loss: 0.3970 - val_accuracy: 0.8340\n",
      "Epoch 97/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.2410 - accuracy: 0.9000 - val_loss: 0.4109 - val_accuracy: 0.8270\n",
      "Epoch 98/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2359 - accuracy: 0.9009 - val_loss: 0.4483 - val_accuracy: 0.8250\n",
      "Epoch 99/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2385 - accuracy: 0.8997 - val_loss: 0.4523 - val_accuracy: 0.8360\n",
      "Epoch 100/120\n",
      "10000/10000 [==============================] - 2s 181us/step - loss: 0.2349 - accuracy: 0.8987 - val_loss: 0.4248 - val_accuracy: 0.8240\n",
      "Epoch 101/120\n",
      "10000/10000 [==============================] - 2s 182us/step - loss: 0.2387 - accuracy: 0.8994 - val_loss: 0.4099 - val_accuracy: 0.8260\n",
      "Epoch 102/120\n",
      "10000/10000 [==============================] - 2s 184us/step - loss: 0.2354 - accuracy: 0.9017 - val_loss: 0.4211 - val_accuracy: 0.8280\n",
      "Epoch 103/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2350 - accuracy: 0.9011 - val_loss: 0.4627 - val_accuracy: 0.8320\n",
      "Epoch 104/120\n",
      "10000/10000 [==============================] - 2s 179us/step - loss: 0.2279 - accuracy: 0.9027 - val_loss: 0.4726 - val_accuracy: 0.8320\n",
      "Epoch 105/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2291 - accuracy: 0.9060 - val_loss: 0.4318 - val_accuracy: 0.8290\n",
      "Epoch 106/120\n",
      "10000/10000 [==============================] - 2s 181us/step - loss: 0.2299 - accuracy: 0.9027 - val_loss: 0.4508 - val_accuracy: 0.8360\n",
      "Epoch 107/120\n",
      "10000/10000 [==============================] - 2s 191us/step - loss: 0.2272 - accuracy: 0.9061 - val_loss: 0.4471 - val_accuracy: 0.8310\n",
      "Epoch 108/120\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 2s 189us/step - loss: 0.2323 - accuracy: 0.9053 - val_loss: 0.4426 - val_accuracy: 0.8280\n",
      "Epoch 109/120\n",
      "10000/10000 [==============================] - 2s 183us/step - loss: 0.2246 - accuracy: 0.9070 - val_loss: 0.4720 - val_accuracy: 0.8380\n",
      "Epoch 110/120\n",
      "10000/10000 [==============================] - 2s 180us/step - loss: 0.2283 - accuracy: 0.9061 - val_loss: 0.4607 - val_accuracy: 0.8290\n",
      "Epoch 111/120\n",
      "10000/10000 [==============================] - 2s 174us/step - loss: 0.2179 - accuracy: 0.9119 - val_loss: 0.4804 - val_accuracy: 0.8230\n",
      "Epoch 112/120\n",
      "10000/10000 [==============================] - 2s 175us/step - loss: 0.2227 - accuracy: 0.9067 - val_loss: 0.4334 - val_accuracy: 0.8330\n",
      "Epoch 113/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2213 - accuracy: 0.9092 - val_loss: 0.5094 - val_accuracy: 0.8330\n",
      "Epoch 114/120\n",
      "10000/10000 [==============================] - 2s 177us/step - loss: 0.2182 - accuracy: 0.9085 - val_loss: 0.4727 - val_accuracy: 0.8260\n",
      "Epoch 115/120\n",
      "10000/10000 [==============================] - 2s 177us/step - loss: 0.2162 - accuracy: 0.9127 - val_loss: 0.4644 - val_accuracy: 0.8260\n",
      "Epoch 116/120\n",
      "10000/10000 [==============================] - 2s 176us/step - loss: 0.2207 - accuracy: 0.9071 - val_loss: 0.4957 - val_accuracy: 0.8340\n",
      "Epoch 117/120\n",
      "10000/10000 [==============================] - 2s 174us/step - loss: 0.2188 - accuracy: 0.9088 - val_loss: 0.4772 - val_accuracy: 0.8280\n",
      "Epoch 118/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2138 - accuracy: 0.9131 - val_loss: 0.5405 - val_accuracy: 0.8120\n",
      "Epoch 119/120\n",
      "10000/10000 [==============================] - 2s 178us/step - loss: 0.2099 - accuracy: 0.9136 - val_loss: 0.4823 - val_accuracy: 0.8220\n",
      "Epoch 120/120\n",
      "10000/10000 [==============================] - 2s 177us/step - loss: 0.2164 - accuracy: 0.9097 - val_loss: 0.5627 - val_accuracy: 0.8140\n"
     ]
    }
   ],
   "source": [
    "# train\n",
    "history = model.fit([inputs_train, queries_train], answers_train,batch_size=32,epochs=120,validation_data=([inputs_test, queries_test], answers_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'chatbot_120_epochs.h5'\n",
    "model.save(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['val_loss', 'val_accuracy', 'loss', 'accuracy'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "print(history.history.keys())\n",
    "# summarize history for accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_results = model.predict(([inputs_test, queries_test]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mary got the milk there . John moved to the bedroom .\n",
      "Is John in the kitchen ?\n",
      "True Test Answer from Data is: no\n"
     ]
    }
   ],
   "source": [
    "#Let's see the first story and question in test data\n",
    "story =' '.join(word for word in test_data[0][0])\n",
    "print(story)\n",
    "query = ' '.join(word for word in test_data[0][1])\n",
    "print(query)\n",
    "print(\"True Test Answer from Data is:\",test_data[0][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted answer is:  no\n",
      "Probability of certainty was:  0.9998995\n"
     ]
    }
   ],
   "source": [
    "#Now Let's predict it with our model\n",
    "#Generate prediction from model\n",
    "val_max = np.argmax(pred_results[0])\n",
    "\n",
    "for key, val in tokenizer.word_index.items():\n",
    "    if val == val_max:\n",
    "        k = key\n",
    "\n",
    "print(\"Predicted answer is: \", k)\n",
    "print(\"Probability of certainty was: \", pred_results[0][val_max])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "P=[]\n",
    "for i in range(len(pred_results)):\n",
    "    P.append(np.argmax(pred_results[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "E=[]\n",
    "for i in range(len(answers_test)):\n",
    "     E.append(np.argmax(answers_test[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acouracy of the model: 0.814\n"
     ]
    }
   ],
   "source": [
    "Correct=0\n",
    "for i in range(len(answers_test)):\n",
    "    if E[i]==P[i]:\n",
    "        Correct=Correct+1\n",
    "print(f'Acouracy of the model: {Correct/len(answers_test)}')        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "there are 186 incorrect classifiction out of 1000\n"
     ]
    }
   ],
   "source": [
    "Incorrect=[]\n",
    "for i in range(len(answers_test)):\n",
    "    if E[i]!=P[i]:\n",
    "        Incorrect.append(P[i])\n",
    "print(f'there are {len(Incorrect) } incorrect classifiction out of 1000')       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['John',\n",
       " 'left',\n",
       " 'the',\n",
       " 'kitchen',\n",
       " '.',\n",
       " 'Sandra',\n",
       " 'dropped',\n",
       " 'the',\n",
       " 'football',\n",
       " 'in',\n",
       " 'the',\n",
       " 'garden',\n",
       " '.']"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Let's make a new question and test our model\n",
    "my_story = \"John left the kitchen . Sandra dropped the football in the garden .\"\n",
    "my_story.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_question = \"Is the football in the garden ?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "mydata = [(my_story.split(),my_question.split(),'yes')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_story,my_ques,my_ans = vectorize_stories(mydata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_results = model.predict(([ my_story, my_ques]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted answer is:  yes\n",
      "Probability of certainty was:  0.99999714\n"
     ]
    }
   ],
   "source": [
    "#Generate prediction from model\n",
    "val_max = np.argmax(pred_results[0])\n",
    "\n",
    "for key, val in tokenizer.word_index.items():\n",
    "    if val == val_max:\n",
    "        k = key\n",
    "\n",
    "print(\"Predicted answer is: \", k)\n",
    "print(\"Probability of certainty was: \", pred_results[0][val_max])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
